# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    Javier\Cineja\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    Javier\Cineja\Infrastructure\Controller\:
        resource: '../src/Infrastructure/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    Javier\Cineja\Infrastructure\Repository\Film\FilmRepository:
        arguments:
            - '@Doctrine\Common\Persistence\ManagerRegistry'
            - 'Javier\Cineja\Domain\Model\Entity\Film\Film'

    Javier\Cineja\Infrastructure\Repository\Film\GenreRepository:
        arguments:
            - '@Doctrine\Common\Persistence\ManagerRegistry'
            - 'Javier\Cineja\Domain\Model\Entity\Film\Genre'

    Javier\Cineja\Infrastructure\Repository\Film\FilmGenre\FilmGenreRepository:
        arguments:
            - '@Doctrine\Common\Persistence\ManagerRegistry'
            - 'Javier\Cineja\Domain\Model\Entity\Film\FilmGenre\FilmGenre'

    Javier\Cineja\Infrastructure\Repository\Room\RoomRepository:
        arguments:
            - '@Doctrine\Common\Persistence\ManagerRegistry'
            - 'Javier\Cineja\Domain\Model\Entity\Room\Room'

    Javier\Cineja\Infrastructure\Repository\Room\Seat\SeatRepository:
        arguments:
            - '@Doctrine\Common\Persistence\ManagerRegistry'
            - 'Javier\Cineja\Domain\Model\Entity\Room\Seat\Seat'

    Javier\Cineja\Infrastructure\Repository\FilmRoom\FilmRoomRepository:
        arguments:
            - '@Doctrine\Common\Persistence\ManagerRegistry'
            - 'Javier\Cineja\Domain\Model\Entity\FilmRoom\FilmRoom'

    Javier\Cineja\Infrastructure\Repository\UserSeatFilm\UserSeatFilmRepository:
        arguments:
            - '@Doctrine\Common\Persistence\ManagerRegistry'
            - 'Javier\Cineja\Domain\Model\Entity\UserSeatFilm\UserSeatFilm'

    Javier\Cineja\Infrastructure\Repository\User\UserRepository:
        arguments:
            - '@Doctrine\Common\Persistence\ManagerRegistry'
            - 'Javier\Cineja\Domain\Model\Entity\User\User'
